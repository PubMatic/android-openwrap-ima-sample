/*
 * Copyright 2006-2020, PubMatic Inc.
 *
 * Licensed under the PubMatic License Agreement. All rights reserved.
 *
 * https://github.com/PubMatic/android-openwrap-ima-sample/blob/master/LICENSE
 */

package com.pubmatic.openwrap.models;

import android.location.Location;
import android.location.LocationManager;
import android.util.Log;

import androidx.annotation.NonNull;

/**
 * A data class representing a geographic location consist of latitude, longitude and location
 * source.
 */
public class POWLocation {

    /**
     * Latitude, in degrees.
     */
    private double latitude;
    /**
     * Longitude, in degrees.
     */
    private double longitude;
    /**
     * Source of the location.
     */
    private Source source;

    /**
     * Instantiate an object of POBLocation using the location source defined {@link Source}
     *
     * @param locationSource location source
     * @param latitude       accepts latitude of the location
     * @param longitude      accepts longitude of the location
     */
    public POWLocation(@NonNull Source locationSource, double latitude, double longitude) {
        source = locationSource;
        this.latitude = latitude;
        this.longitude = longitude;
    }

    /**
     * Instantiate an object of POBLocation using the Android's default location object
     *
     * @param location Android's default location object
     */
    public POWLocation(@NonNull Location location) {

        if (location != null) {
            this.latitude = location.getLatitude();
            this.longitude = location.getLongitude();

            String provider = location.getProvider();
            if (provider != null && (provider.equalsIgnoreCase("network") || provider.equalsIgnoreCase("gps") || provider.equalsIgnoreCase("wifi")))
                source = Source.GPS;
            else
                source = Source.USER;
        } else {
            Log.d("POWLocation", "Provided location object is null");
        }
    }


    /**
     * Returns the latitude, in degrees.
     *
     * <p>All locations generated by the {@link LocationManager}
     * will have a valid latitude.
     *
     * @return provides latitude of the location
     */
    public double getLatitude() {
        return latitude;
    }

    /**
     * Returns the longitude, in degrees.
     * <p>All locations generated by the {@link LocationManager}
     * will have a valid longitude.
     *
     * @return provides longitude of the location
     */
    public double getLongitude() {
        return longitude;
    }

    /**
     * Returns the source of the location.
     *
     * @return location source
     */
    public Source getSource() {
        return source;
    }

    /**
     * Enum to define the location source.
     */
    public enum Source {
        /**
         * Indicates that location is inferred using the Android APIs
         */
        GPS(1),
        /**
         * Indicates that location is inferred using IP address
         */
        IP_ADDRESS(2),
        /**
         * Indicates that location is provided by application user.
         */
        USER(3);

        private final int value;

        Source(int val) {
            this.value = val;
        }

        /**
         * Returns the integer representation of location source. Possible values are:
         * 1 - GPS
         * 2 - IP_ADDRESS
         * 3 - USER
         *
         * @return Integer representation of location source
         */
        public int getValue() {
            return value;
        }
    }

}
